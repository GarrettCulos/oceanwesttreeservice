'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const index_1 = require('./index');
const test1_package_lock_json_1 = require('./test1.package-lock.json');
describe('sanity checks', () => {
  it('export is valid class', () => {
    const classTest = new index_1.SamWebpackPlugin({});
    expect(classTest instanceof index_1.SamWebpackPlugin).toBeTruthy();
  });
});
describe('constructor defines variables and throws errors', () => {
  it('plugin constructor defines deployFolder', () => {
    const SamPlugin = new index_1.SamWebpackPlugin({});
    expect(SamPlugin.deploymentFolder).toBeDefined();
    expect(SamPlugin.deploymentFolder).toEqual('./.lambdas');
    const SamPlugin2 = new index_1.SamWebpackPlugin({ output: 'new-output' });
    expect(SamPlugin2.deploymentFolder).toEqual('new-output');
  });
  it('plugin constructor defines options.verbose', () => {
    const SamPlugin = new index_1.SamWebpackPlugin({});
    expect(SamPlugin.options).toBeDefined();
    expect(SamPlugin.options.verbose).toBeDefined();
    expect(SamPlugin.options.verbose).toBeFalsy();
    const SamPlugin2 = new index_1.SamWebpackPlugin({ verbose: true });
    expect(SamPlugin2.options).toBeDefined();
    expect(SamPlugin2.options.verbose).toBeDefined();
    expect(SamPlugin2.options.verbose).toBeTruthy();
  });
  it('plugin constructor defines options.requireText', () => {
    const SamPlugin = new index_1.SamWebpackPlugin({});
    expect(SamPlugin.options).toBeDefined();
    expect(SamPlugin.options.requireTxt).toBeDefined();
    expect(SamPlugin.options.requireTxt).toBeFalsy();
    const SamPlugin2 = new index_1.SamWebpackPlugin({ requireTxt: true });
    expect(SamPlugin2.options).toBeDefined();
    expect(SamPlugin2.options.requireTxt).toBeDefined();
    expect(SamPlugin2.options.requireTxt).toBeTruthy();
  });
  it('plugin constructor should save layers options', () => {});
});
describe('parseLambdaDeclaration', () => {
  it('parseLambdaDeclaration should be defined', () => {});
  it("parseLambdaDeclaration should return when string doesn't contain @lambdaDeclaration", () => {});
  it('parseLambdaDeclaration should parse string to json when it contains @lambdaDeclaration', () => {});
  it('parseLambdaDeclaration should throw error when content is not a json', () => {});
});
describe('logDependencies', () => {
  it('logDependencies should be defined', () => {});
  it('logDependencies should return string of dependencies', () => {});
});
describe('getDependencies', () => {
  it('handles requires with non dependency requires (like ws -> async-limiter)', () => {
    const SamPlugin = new index_1.SamWebpackPlugin({});
    const depsArray = SamPlugin.recursiveGetDepsRequires(test1_package_lock_json_1.default.dependencies);
    expect(depsArray.includes('ws')).toBeTruthy();
    expect(depsArray.includes('async-limiter')).toBeTruthy();
  });
});
describe('apply method', () => {
  it('apply method should be define', () => {});
  it('apply method should be define', () => {});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZGV4LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBMkM7QUFDM0MsdUVBQXdEO0FBRXhELFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBZ0IsQ0FBQyxFQUFHLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsU0FBUyxZQUFZLHdCQUFnQixDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxpREFBaUQsRUFBRSxHQUFHLEVBQUU7SUFFL0QsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtRQUNqRCxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFnQixDQUFDLEVBQUcsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqRCxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXpELE1BQU0sVUFBVSxHQUFHLElBQUksd0JBQWdCLENBQUMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUNsRSxNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRTVELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtRQUNwRCxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFnQixDQUFDLEVBQUcsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENB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QztRQUM5QyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtJQUM1QixFQUFFLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hELENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2FtV2VicGFja1BsdWdpbiB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHRlc3RQYWNrYWdlTG9jayBmcm9tICcuL3Rlc3QxLnBhY2thZ2UtbG9jay5qc29uJztcblxuZGVzY3JpYmUoJ3Nhbml0eSBjaGVja3MnLCAoKSA9PiB7XG4gIGl0KCdleHBvcnQgaXMgdmFsaWQgY2xhc3MnLCAoKSA9PiB7XG4gICAgY29uc3QgY2xhc3NUZXN0ID0gbmV3IFNhbVdlYnBhY2tQbHVnaW4oeyB9KTtcbiAgICBleHBlY3QoY2xhc3NUZXN0IGluc3RhbmNlb2YgU2FtV2VicGFja1BsdWdpbikudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnY29uc3RydWN0b3IgZGVmaW5lcyB2YXJpYWJsZXMgYW5kIHRocm93cyBlcnJvcnMnLCAoKSA9PiB7XG4gIFxuICBpdCgncGx1Z2luIGNvbnN0cnVjdG9yIGRlZmluZXMgZGVwbG95Rm9sZGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IFNhbVBsdWdpbiA9IG5ldyBTYW1XZWJwYWNrUGx1Z2luKHsgfSk7XG4gICAgZXhwZWN0KFNhbVBsdWdpbi5kZXBsb3ltZW50Rm9sZGVyKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTYW1QbHVnaW4uZGVwbG95bWVudEZvbGRlcikudG9FcXVhbCgnLi8ubGFtYmRhcycpO1xuXG4gICAgY29uc3QgU2FtUGx1Z2luMiA9IG5ldyBTYW1XZWJwYWNrUGx1Z2luKHsgb3V0cHV0OiAnbmV3LW91dHB1dCcgfSk7XG4gICAgZXhwZWN0KFNhbVBsdWdpbjIuZGVwbG95bWVudEZvbGRlcikudG9FcXVhbCgnbmV3LW91dHB1dCcpO1xuICAgIFxuICB9KTtcblxuICBpdCgncGx1Z2luIGNvbnN0cnVjdG9yIGRlZmluZXMgb3B0aW9ucy52ZXJib3NlJywgKCkgPT4ge1xuICAgIGNvbnN0IFNhbVBsdWdpbiA9IG5ldyBTYW1XZWJwYWNrUGx1Z2luKHsgfSk7XG4gICAgZXhwZWN0KFNhbVBsdWdpbi5vcHRpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTYW1QbHVnaW4ub3B0aW9ucy52ZXJib3NlKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTYW1QbHVnaW4ub3B0aW9ucy52ZXJib3NlKS50b0JlRmFsc3koKTtcblxuICAgIGNvbnN0IFNhbVBsdWdpbjIgPSBuZXcgU2FtV2VicGFja1BsdWdpbih7IHZlcmJvc2U6IHRydWUgfSk7XG4gICAgZXhwZWN0KFNhbVBsdWdpbjIub3B0aW9ucykudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoU2FtUGx1Z2luMi5vcHRpb25zLnZlcmJvc2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KFNhbVBsdWdpbjIub3B0aW9ucy52ZXJib3NlKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdwbHVnaW4gY29uc3RydWN0b3IgZGVmaW5lcyBvcHRpb25zLnJlcXVpcmVUZXh0JywgKCkgPT4ge1xuICAgIGNvbnN0IFNhbVBsdWdpbiA9IG5ldyBTYW1XZWJwYWNrUGx1Z2luKHsgfSk7XG4gICAgZXhwZWN0KFNhbVBsdWdpbi5vcHRpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTYW1QbHVnaW4ub3B0aW9ucy5yZXF1aXJlVHh0KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdChTYW1QbHVnaW4ub3B0aW9ucy5yZXF1aXJlVHh0KS50b0JlRmFsc3koKTtcblxuICAgIGNvbnN0IFNhbVBsdWdpbjIgPSBuZXcgU2FtV2VicGFja1BsdWdpbih7IHJlcXVpcmVUeHQ6IHRydWUgfSk7XG4gICAgZXhwZWN0KFNhbVBsdWdpbjIub3B0aW9ucykudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoU2FtUGx1Z2luMi5vcHRpb25zLnJlcXVpcmVUeHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KFNhbVBsdWdpbjIub3B0aW9ucy5yZXF1aXJlVHh0KS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuICBpdCgncGx1Z2luIGNvbnN0cnVjdG9yIHNob3VsZCBzYXZlIGxheWVycyBvcHRpb25zJywgKCkgPT4ge30pO1xufSk7XG5cbmRlc2NyaWJlKCdwYXJzZUxhbWJkYURlY2xhcmF0aW9uJywgKCkgPT4ge1xuICBpdCgncGFyc2VMYW1iZGFEZWNsYXJhdGlvbiBzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHt9KTtcbiAgaXQoXCJwYXJzZUxhbWJkYURlY2xhcmF0aW9uIHNob3VsZCByZXR1cm4gd2hlbiBzdHJpbmcgZG9lc24ndCBjb250YWluIEBsYW1iZGFEZWNsYXJhdGlvblwiLCAoKSA9PiB7fSk7XG4gIGl0KCdwYXJzZUxhbWJkYURlY2xhcmF0aW9uIHNob3VsZCBwYXJzZSBzdHJpbmcgdG8ganNvbiB3aGVuIGl0IGNvbnRhaW5zIEBsYW1iZGFEZWNsYXJhdGlvbicsICgpID0+IHt9KTtcbiAgaXQoJ3BhcnNlTGFtYmRhRGVjbGFyYXRpb24gc2hvdWxkIHRocm93IGVycm9yIHdoZW4gY29udGVudCBpcyBub3QgYSBqc29uJywgKCkgPT4ge30pO1xufSk7XG5cbmRlc2NyaWJlKCdsb2dEZXBlbmRlbmNpZXMnLCAoKSA9PiB7XG4gIGl0KCdsb2dEZXBlbmRlbmNpZXMgc2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7fSk7XG4gIGl0KCdsb2dEZXBlbmRlbmNpZXMgc2hvdWxkIHJldHVybiBzdHJpbmcgb2YgZGVwZW5kZW5jaWVzJywgKCkgPT4ge30pO1xufSk7XG5cbmRlc2NyaWJlKCdnZXREZXBlbmRlbmNpZXMnLCAoKSA9PiB7XG4gIGl0KCdoYW5kbGVzIHJlcXVpcmVzIHdpdGggbm9uIGRlcGVuZGVuY3kgcmVxdWlyZXMgKGxpa2Ugd3MgLT4gYXN5bmMtbGltaXRlciknLCAoKSA9PiB7XG4gICAgY29uc3QgU2FtUGx1Z2luID0gbmV3IFNhbVdlYnBhY2tQbHVnaW4oe30pO1xuICAgIGNvbnN0IGRlcHNBcnJheSA9IFNhbVBsdWdpbi5yZWN1cnNpdmVHZXREZXBzUmVxdWlyZXModGVzdFBhY2thZ2VMb2NrLmRlcGVuZGVuY2llcyk7XG4gICAgZXhwZWN0KGRlcHNBcnJheS5pbmNsdWRlcygnd3MnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChkZXBzQXJyYXkuaW5jbHVkZXMoJ2FzeW5jLWxpbWl0ZXInKSkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnYXBwbHkgbWV0aG9kJywgKCkgPT4ge1xuICBpdCgnYXBwbHkgbWV0aG9kIHNob3VsZCBiZSBkZWZpbmUnLCAoKSA9PiB7fSk7XG4gIGl0KCdhcHBseSBtZXRob2Qgc2hvdWxkIGJlIGRlZmluZScsICgpID0+IHt9KTtcbn0pO1xuIl19
